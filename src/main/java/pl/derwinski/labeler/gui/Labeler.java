/*
 * Copyright (C) 2018 Dominik Derwiński
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package pl.derwinski.labeler.gui;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.WindowEvent;
import java.net.URI;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.event.HyperlinkEvent;
import pl.derwinski.labeler.data.LabelFile;
import pl.derwinski.labeler.data.LabelSet;

/**
 *
 * @author Dominik Derwiński
 */
public final class Labeler extends javax.swing.JFrame implements EditorListener {

    private static final long serialVersionUID = 1L;

    private static final String VERSION = "1.0.2";

    private final Editor editor;
    private final PageEditor pageEditor;

    private JScrollPane helpPane;
    private JEditorPane aboutPane;

    @SuppressWarnings("LeakingThisInConstructor")
    public Labeler() {
        initComponents();
        setLocationRelativeTo(null);
        setMinimumSize(getSize());
        setIconImage(new ImageIcon(Labeler.class.getResource("/labeler.png")).getImage());
        editor = new Editor();
        editor.addListener(this);
        pageEditor = new PageEditor();
        pageEditor.startEditing(editor);
        setEditor.startEditing(editor);
        previewPane.startEditing(editor);
    }

    @Override
    public void changed(LabelFile labelFile, LabelSet labelSet) {
        //
    }

    @Override
    public void altered(LabelFile labelFile) {
        //
    }

    @Override
    public void altered(LabelSet labelSet) {
        //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setEditor = new pl.derwinski.labeler.gui.SetEditor();
        previewPane = new pl.derwinski.labeler.gui.PreviewPane();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        sep1 = new javax.swing.JPopupMenu.Separator();
        miGenerate = new javax.swing.JMenuItem();
        sep2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        miPage = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miHelp = new javax.swing.JMenuItem();
        sep3 = new javax.swing.JPopupMenu.Separator();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Labeler");
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));
        getContentPane().add(setEditor, java.awt.BorderLayout.WEST);
        getContentPane().add(previewPane, java.awt.BorderLayout.CENTER);

        menuFile.setMnemonic('F');
        menuFile.setText("File");

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miNew.setMnemonic('N');
        miNew.setText("New");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        menuFile.add(miNew);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miOpen.setMnemonic('O');
        miOpen.setText("Open...");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        menuFile.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSave.setMnemonic('S');
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        menuFile.add(miSave);

        miSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSaveAs.setMnemonic('a');
        miSaveAs.setText("Save As...");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(miSaveAs);
        menuFile.add(sep1);

        miGenerate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miGenerate.setMnemonic('G');
        miGenerate.setText("Generate...");
        miGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGenerateActionPerformed(evt);
            }
        });
        menuFile.add(miGenerate);
        menuFile.add(sep2);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miExit.setMnemonic('x');
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuFile.add(miExit);

        menuBar.add(menuFile);

        menuEdit.setMnemonic('E');
        menuEdit.setText("Edit");

        miPage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miPage.setMnemonic('P');
        miPage.setText("Page settings...");
        miPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPageActionPerformed(evt);
            }
        });
        menuEdit.add(miPage);

        menuBar.add(menuEdit);

        menuHelp.setMnemonic('H');
        menuHelp.setText("Help");

        miHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miHelp.setMnemonic('H');
        miHelp.setText("Help...");
        miHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHelpActionPerformed(evt);
            }
        });
        menuHelp.add(miHelp);
        menuHelp.add(sep3);

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miAbout.setMnemonic('b');
        miAbout.setText("About...");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        menuHelp.add(miAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        editor.newLabelFile();
  }//GEN-LAST:event_miNewActionPerformed

    @SuppressWarnings("UseSpecificCatch")
  private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        editor.openLabelFile(this);
  }//GEN-LAST:event_miOpenActionPerformed

    @SuppressWarnings("UseSpecificCatch")
  private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        editor.saveLabelFile(this);
  }//GEN-LAST:event_miSaveActionPerformed

    @SuppressWarnings("UseSpecificCatch")
  private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        editor.saveAsLabelFile(this);
  }//GEN-LAST:event_miSaveAsActionPerformed

  private void miGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGenerateActionPerformed
        editor.generateImageFile(this);
  }//GEN-LAST:event_miGenerateActionPerformed

  private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
  }//GEN-LAST:event_miExitActionPerformed

  private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        if (aboutPane == null) {
            aboutPane = new JEditorPane("text/html", String.format("<b>Labeler %s</b> - creating labels for miniature bases<br>Copyright © 2018-2023 Dominik Derwiński<br>For updates see <a href=\"github\">https://github.com/morvael/labeler</a>.<br><br>This program is free software: you can redistribute it and/or modify<br>it under the terms of the GNU General Public License as published by<br>the Free Software Foundation, either version 3 of the License, or<br>(at your option) any later version.<br><br>This program is distributed in the hope that it will be useful,<br>but WITHOUT ANY WARRANTY; without even the implied warranty of<br>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>GNU General Public License for more details.<br><br>You should have received a copy of the GNU General Public License<br>along with this program.  If not, see <a href=\"gnu\">https://www.gnu.org/licenses/</a>.", VERSION));
            aboutPane.setEditable(false);
            aboutPane.setOpaque(true);
            aboutPane.addHyperlinkListener((hl) -> {
                try {
                    if (hl.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                        switch (hl.getDescription()) {
                            case "github":
                                Desktop.getDesktop().browse(new URI("https://github.com/morvael/labeler"));
                                break;
                            case "gnu":
                                Desktop.getDesktop().browse(new URI("https://www.gnu.org/licenses/"));
                                break;
                        }
                    }
                } catch (Exception ex) {

                }
            });
        }
        JOptionPane.showMessageDialog(this, aboutPane, "About", JOptionPane.PLAIN_MESSAGE);
  }//GEN-LAST:event_miAboutActionPerformed

  private void miPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPageActionPerformed
        JOptionPane.showMessageDialog(this, pageEditor, "Page settings", JOptionPane.PLAIN_MESSAGE);
  }//GEN-LAST:event_miPageActionPerformed

  private void miHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHelpActionPerformed
        if (helpPane == null) {
            try {
                JEditorPane viewer = new JEditorPane(Labeler.class.getResource("/help.html"));
                viewer.setEditable(false);
                viewer.setOpaque(true);
                viewer.addHyperlinkListener((hl) -> {
                    try {
                        if (hl.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                            switch (hl.getDescription()) {
                                case "issues":
                                    Desktop.getDesktop().browse(new URI("https://github.com/morvael/labeler/issues"));
                                    break;
                            }
                        }
                    } catch (Exception ex) {

                    }
                });
                helpPane = new JScrollPane(viewer, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                helpPane.setPreferredSize(new Dimension(600, 500));
            } catch (Exception ex) {

            }
        }
        if (helpPane != null) {
            JOptionPane.showMessageDialog(this, helpPane, "Help", JOptionPane.PLAIN_MESSAGE);
        }
  }//GEN-LAST:event_miHelpActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {

        }

        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Labeler().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miGenerate;
    private javax.swing.JMenuItem miHelp;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miPage;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private pl.derwinski.labeler.gui.PreviewPane previewPane;
    private javax.swing.JPopupMenu.Separator sep1;
    private javax.swing.JPopupMenu.Separator sep2;
    private javax.swing.JPopupMenu.Separator sep3;
    private pl.derwinski.labeler.gui.SetEditor setEditor;
    // End of variables declaration//GEN-END:variables
}
